"use client";

import React, { useState, useEffect } from "react";
import { useRouter } from "next/navigation";
import { createClient } from "@/lib/supabase";

interface UserPreferences {
  exam: string;
  subjects: string[];
  level: string;
  study_time: string;
  exam_date: string;
}

export default function Step4() {
  const [preferences, setPreferences] = useState<UserPreferences | null>(null);
  const [loading, setLoading] = useState(false);
  const [notifications, setNotifications] = useState(true);
  const [dailyReminders, setDailyReminders] = useState(true);
  const router = useRouter();

  useEffect(() => {
    const loadUserPreferences = async () => {
      const supabase = createClient();
      const { data: { user } } = await supabase.auth.getUser();
      
      if (user?.user_metadata?.preferences) {
        setPreferences(user.user_metadata.preferences);
      }
    };

    loadUserPreferences();
  }, []);

  const handleFinish = async () => {
    setLoading(true);
    try {
      const supabase = createClient();
      const { data: { user } } = await supabase.auth.getUser();

      if (!user) {
        alert("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É");
        return;
      }

      // –ó–∞–≤–µ—Ä—à–∞–µ–º onboarding –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
      const { error } = await supabase.auth.updateUser({
        data: {
          preferences: {
            ...user.user_metadata.preferences,
            notifications,
            daily_reminders: dailyReminders,
            onboarding_completed: true,
            onboarding_step: 5
          }
        }
      });

      if (error) {
        console.error("Error completing onboarding:", error);
        alert("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö");
      } else {
        // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        router.push("/dashboard");
      }
    } catch (err) {
      console.error("Error in step 4:", err);
      alert("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞");
    } finally {
      setLoading(false);
    }
  };

  if (!preferences) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="loading loading-spinner loading-lg"></div>
      </div>
    );
  }

  return (
    <div className="min-h-screen flex items-center justify-center bg-gray-50">
      <div className="max-w-2xl w-full bg-white rounded-lg shadow-md p-8">
        <div className="text-center mb-8">
          <h1 className="text-2xl font-bold text-gray-900 mb-2">
            –í—Å—ë –≥–æ—Ç–æ–≤–æ! üéâ
          </h1>
          <p className="text-gray-600">
            –®–∞–≥ 4 –∏–∑ 4: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
          </p>
        </div>

        {/* –°–≤–æ–¥–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ */}
        <div className="bg-gray-50 rounded-lg p-6 mb-6">
          <h3 className="text-lg font-medium text-gray-900 mb-4">
            –í–∞—à–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:
          </h3>
          
          <div className="space-y-3">
            <div className="flex justify-between">
              <span className="text-gray-600">–≠–∫–∑–∞–º–µ–Ω:</span>
              <span className="font-medium">{preferences.exam.toUpperCase()}</span>
            </div>
            
            <div className="flex justify-between">
              <span className="text-gray-600">–ü—Ä–µ–¥–º–µ—Ç—ã:</span>
              <span className="font-medium">{preferences.subjects.length} –ø—Ä–µ–¥–º–µ—Ç–∞</span>
            </div>
            
            <div className="flex justify-between">
              <span className="text-gray-600">–£—Ä–æ–≤–µ–Ω—å:</span>
              <span className="font-medium capitalize">{preferences.level}</span>
            </div>
            
            <div className="flex justify-between">
              <span className="text-gray-600">–í—Ä–µ–º—è –≤ –¥–µ–Ω—å:</span>
              <span className="font-medium">{preferences.study_time} –º–∏–Ω</span>
            </div>
            
            <div className="flex justify-between">
              <span className="text-gray-600">–î–∞—Ç–∞ —ç–∫–∑–∞–º–µ–Ω–∞:</span>
              <span className="font-medium">
                {new Date(preferences.exam_date).toLocaleDateString('ru-RU')}
              </span>
            </div>
          </div>
        </div>

        {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π */}
        <div className="space-y-4 mb-8">
          <h3 className="text-lg font-medium text-gray-900">
            –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:
          </h3>
          
          <div className="flex items-center justify-between p-4 bg-gray-50 rounded-lg">
            <div>
              <h4 className="font-medium text-gray-900">Push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</h4>
              <p className="text-sm text-gray-600">
                –ü–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á–∞—Ö –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è—Ö
              </p>
            </div>
            <input
              type="checkbox"
              checked={notifications}
              onChange={(e) => setNotifications(e.target.checked)}
              className="w-5 h-5 text-blue-600"
            />
          </div>
          
          <div className="flex items-center justify-between p-4 bg-gray-50 rounded-lg">
            <div>
              <h4 className="font-medium text-gray-900">–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è</h4>
              <p className="text-sm text-gray-600">
                –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –∑–∞–Ω—è—Ç–∏—è—Ö –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
              </p>
            </div>
            <input
              type="checkbox"
              checked={dailyReminders}
              onChange={(e) => setDailyReminders(e.target.checked)}
              className="w-5 h-5 text-blue-600"
            />
          </div>
        </div>

        {/* –ß—Ç–æ –¥–∞–ª—å—à–µ */}
        <div className="bg-blue-50 rounded-lg p-6 mb-8">
          <h3 className="text-lg font-medium text-blue-900 mb-2">
            –ß—Ç–æ –¥–∞–ª—å—à–µ?
          </h3>
          <ul className="text-sm text-blue-800 space-y-1">
            <li>‚Ä¢ –°–∏—Å—Ç–µ–º–∞ —Å–æ—Å—Ç–∞–≤–∏—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –æ–±—É—á–µ–Ω–∏—è</li>
            <li>‚Ä¢ –í—ã –ø–æ–ª—É—á–∏—Ç–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Å–ª–∞–±—ã–º —Ç–µ–º–∞–º</li>
            <li>‚Ä¢ –ù–∞—á–Ω–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏</li>
            <li>‚Ä¢ –°–º–æ–∂–µ—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ</li>
          </ul>
        </div>

        <div className="flex justify-between">
          <button
            onClick={() => router.push("/onboarding/step-3")}
            className="px-4 py-2 text-gray-600 hover:text-gray-800"
          >
            ‚Üê –ù–∞–∑–∞–¥
          </button>
          <button
            onClick={handleFinish}
            disabled={loading}
            className="px-8 py-3 bg-green-600 text-white rounded-lg hover:bg-green-700 disabled:opacity-50 disabled:cursor-not-allowed font-medium"
          >
            {loading ? "–ù–∞—Å—Ç—Ä–æ–π–∫–∞..." : "–ù–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ! üöÄ"}
          </button>
        </div>

        {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ */}
        <div className="mt-6">
          <div className="flex items-center justify-center space-x-2">
            <div className="w-3 h-3 bg-blue-600 rounded-full"></div>
            <div className="w-3 h-3 bg-blue-600 rounded-full"></div>
            <div className="w-3 h-3 bg-blue-600 rounded-full"></div>
            <div className="w-3 h-3 bg-green-600 rounded-full"></div>
          </div>
        </div>
      </div>
    </div>
  );
}
