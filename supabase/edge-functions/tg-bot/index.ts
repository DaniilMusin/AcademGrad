import { serve } from "https://deno.land/std@0.224.0/http/server.ts";
import { createClient } from "https://esm.sh/@supabase/supabase-js@2";

serve(async (req) => {
  if (req.method !== "POST") {
    return new Response("Method not allowed", { status: 405 });
  }

  try {
    const update = await req.json();
    
    // Handle incoming Telegram webhook
    if (update.message?.text) {
      await handleMessage(update.message);
    } else if (update.inline_query) {
      await handleInlineQuery(update.inline_query);
    } else if (update.chosen_inline_result) {
      await handleChosenInlineResult(update.chosen_inline_result);
    }
    
    return new Response("OK");
  } catch (error) {
    console.error("Error in telegram webhook:", error);
    return new Response("Error", { status: 500 });
  }
});

async function handleMessage(message: any) {
  const chatId = message.chat.id;
  const text = message.text;
  
  const supabase = createClient(
    Deno.env.get("SUPABASE_URL")!,
    Deno.env.get("SUPABASE_SERVICE_ROLE_KEY")!
  );

  if (text === "/start") {
    await sendMessage(chatId, `
üéì –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç AcademGrad –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–¥–∞—á–∞–º–∏ –ï–ì–≠.

üìù –ö–æ–º–∞–Ω–¥—ã:
/tasks_today - –ó–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
/progress - –¢–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å
/streak - –ü–æ–ª–æ—Å–∞ —Ä–µ—à–µ–Ω–∏–π
/help - –ü–æ–º–æ—â—å

üîç Inline-—Ä–µ–∂–∏–º:
–ù–∞–±–µ—Ä–∏—Ç–µ @academgrad_bot –≤ –ª—é–±–æ–º —á–∞—Ç–µ –∏ –Ω–∞—á–Ω–∏—Ç–µ –ø–æ–∏—Å–∫ –∑–∞–¥–∞—á!
–ù–∞–ø—Ä–∏–º–µ—Ä: @academgrad_bot –∞–ª–≥–µ–±—Ä–∞
    `);
  } else if (text === "/tasks_today") {
    await sendTasksToday(chatId, supabase);
  } else if (text === "/progress") {
    await sendProgress(chatId, supabase);
  } else if (text === "/streak") {
    await sendStreak(chatId, supabase);
  } else if (text === "/help") {
    await sendHelp(chatId);
  } else {
    await sendMessage(chatId, "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.");
  }
}

async function handleInlineQuery(inlineQuery: any) {
  const queryId = inlineQuery.id;
  const query = inlineQuery.query.trim().toLowerCase();
  
  const supabase = createClient(
    Deno.env.get("SUPABASE_URL")!,
    Deno.env.get("SUPABASE_SERVICE_ROLE_KEY")!
  );

  try {
    let results = [];

    if (query === "" || query.length < 2) {
      // Show popular categories when no query
      results = [
        {
          type: "article",
          id: "algebra",
          title: "üìä –ê–ª–≥–µ–±—Ä–∞",
          description: "–ó–∞–¥–∞—á–∏ –ø–æ –∞–ª–≥–µ–±—Ä–µ",
          input_message_content: {
            message_text: "üîç –ü–æ–∏—Å–∫ –∑–∞–¥–∞—á –ø–æ –∞–ª–≥–µ–±—Ä–µ...",
          },
          thumb_url: "https://via.placeholder.com/64x64/4f46e5/white?text=üìä"
        },
        {
          type: "article",
          id: "geometry",
          title: "üìê –ì–µ–æ–º–µ—Ç—Ä–∏—è", 
          description: "–ó–∞–¥–∞—á–∏ –ø–æ –≥–µ–æ–º–µ—Ç—Ä–∏–∏",
          input_message_content: {
            message_text: "üîç –ü–æ–∏—Å–∫ –∑–∞–¥–∞—á –ø–æ –≥–µ–æ–º–µ—Ç—Ä–∏–∏...",
          },
          thumb_url: "https://via.placeholder.com/64x64/059669/white?text=üìê"
        },
        {
          type: "article",
          id: "probability",
          title: "üé≤ –¢–µ–æ—Ä–∏—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π",
          description: "–ó–∞–¥–∞—á–∏ –ø–æ —Ç–µ–æ—Ä–∏–∏ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π",
          input_message_content: {
            message_text: "üîç –ü–æ–∏—Å–∫ –∑–∞–¥–∞—á –ø–æ —Ç–µ–æ—Ä–∏–∏ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π...",
          },
          thumb_url: "https://via.placeholder.com/64x64/dc2626/white?text=üé≤"
        }
      ];
    } else {
      // Search tasks by query
      const { data: tasks } = await supabase
        .from("tasks")
        .select("id, topic, difficulty, content")
        .or(`topic.ilike.%${query}%,content.ilike.%${query}%`)
        .limit(10);

      if (tasks && tasks.length > 0) {
        results = tasks.map((task: any, index: number) => ({
          type: "article",
          id: `task_${task.id}`,
          title: `${getEmojiByTopic(task.topic)} ${task.topic}`,
          description: `–°–ª–æ–∂–Ω–æ—Å—Ç—å: ${'‚≠ê'.repeat(task.difficulty)} | ${task.content.substring(0, 100)}...`,
          input_message_content: {
            message_text: `üìö –ó–∞–¥–∞—á–∞: ${task.topic}\n\n${task.content}\n\nüéØ –°–ª–æ–∂–Ω–æ—Å—Ç—å: ${'‚≠ê'.repeat(task.difficulty)}\n\nüëÜ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∑–∞–¥–∞—á—É —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–µ—à–µ–Ω–∏–µ`,
            parse_mode: "HTML"
          },
          thumb_url: `https://via.placeholder.com/64x64/${getColorByDifficulty(task.difficulty)}/white?text=${getEmojiByTopic(task.topic)}`
        }));
      } else {
        results = [{
          type: "article",
          id: "no_results",
          title: "üö´ –ó–∞–¥–∞—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
          description: `–ü–æ –∑–∞–ø—Ä–æ—Å—É "${query}" –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`,
          input_message_content: {
            message_text: `üîç –ü–æ –∑–∞–ø—Ä–æ—Å—É "${query}" –∑–∞–¥–∞—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞.`,
          },
          thumb_url: "https://via.placeholder.com/64x64/6b7280/white?text=üö´"
        }];
      }
    }

    await answerInlineQuery(queryId, results);

  } catch (error) {
    console.error("Error in inline query:", error);
    await answerInlineQuery(queryId, [{
      type: "article",
      id: "error",
      title: "‚ùå –û—à–∏–±–∫–∞",
      description: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ",
      input_message_content: {
        message_text: "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∑–∞–¥–∞—á. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
      }
    }]);
  }
}

async function handleChosenInlineResult(chosenResult: any) {
  const resultId = chosenResult.result_id;
  const userId = chosenResult.from.id;
  
  // Log inline result usage for analytics
  console.log(`Inline result chosen: ${resultId} by user ${userId}`);
  
  // Could track usage in database here
  const supabase = createClient(
    Deno.env.get("SUPABASE_URL")!,
    Deno.env.get("SUPABASE_SERVICE_ROLE_KEY")!
  );

  if (resultId.startsWith('task_')) {
    const taskId = resultId.replace('task_', '');
    
    // Log task sharing
    await supabase
      .from('task_shares')
      .insert({
        task_id: parseInt(taskId),
        telegram_user_id: userId,
        shared_at: new Date().toISOString()
      });
  }
}

function getColorByDifficulty(difficulty: number): string {
  if (difficulty <= 3) return "22c55e"; // green
  if (difficulty <= 6) return "f59e0b"; // yellow
  if (difficulty <= 8) return "f97316"; // orange
  return "ef4444"; // red
}

async function sendTasksToday(chatId: number, supabase: any) {
  try {
    // Get today's recommended tasks
    const { data: tasks } = await supabase
      .from("recommendations")
      .select(`
        task_id,
        tasks (
          topic,
          difficulty,
          content
        )
      `)
      .limit(3);

    if (tasks && tasks.length > 0) {
      let message = "üìö *–ó–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:*\n\n";
      
      tasks.forEach((rec: any, index: number) => {
        const task = rec.tasks;
        message += `${index + 1}. *${task.topic}*\n`;
        message += `   üéØ –°–ª–æ–∂–Ω–æ—Å—Ç—å: ${task.difficulty}/10\n`;
        message += `   üìù ${task.content.substring(0, 100)}...\n\n`;
      });
      
      message += "üí° –†–µ—à–∞–π—Ç–µ –∑–∞–¥–∞—á–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ AcademGrad!";
      
      await sendMessage(chatId, message, "Markdown");
    } else {
      await sendMessage(chatId, "üì≠ –ù–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞!");
    }
  } catch (error) {
    console.error("Error getting tasks:", error);
    await sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á.");
  }
}

async function sendProgress(chatId: number, supabase: any) {
  try {
    // This would need user linking logic
    await sendMessage(chatId, `
üìä *–í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å:*

‚úÖ –†–µ—à–µ–Ω–æ –∑–∞–¥–∞—á: 45
üî• –¢–µ–∫—É—â–∞—è –ø–æ–ª–æ—Å–∞: 7 –¥–Ω–µ–π
üéØ –°—Ä–µ–¥–Ω—è—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: 6.2/10
üìà –¢–æ—á–Ω–æ—Å—Ç—å: 78%

üí° –î–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ AcademGrad!
    `, "Markdown");
  } catch (error) {
    console.error("Error getting progress:", error);
    await sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞.");
  }
}

async function sendStreak(chatId: number, supabase: any) {
  await sendMessage(chatId, `
üî• *–í–∞—à–∞ –ø–æ–ª–æ—Å–∞ —Ä–µ—à–µ–Ω–∏–π:*

–¢–µ–∫—É—â–∞—è –ø–æ–ª–æ—Å–∞: *7 –¥–Ω–µ–π* üî•
–õ—É—á—à–∞—è –ø–æ–ª–æ—Å–∞: *12 –¥–Ω–µ–π* üèÜ

üìÖ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–Ω–∏:
–í—á–µ—Ä–∞: ‚úÖ 3 –∑–∞–¥–∞—á–∏
–ü–æ–∑–∞–≤—á–µ—Ä–∞: ‚úÖ 2 –∑–∞–¥–∞—á–∏  
3 –¥–Ω—è –Ω–∞–∑–∞–¥: ‚úÖ 4 –∑–∞–¥–∞—á–∏

üí™ –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Ä–µ—à–∞—Ç—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å!
  `, "Markdown");
}

async function sendHelp(chatId: number) {
  await sendMessage(chatId, `
üÜò *–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É AcademGrad*

üìù *–ö–æ–º–∞–Ω–¥—ã:*
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
/tasks_today - –ó–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
/progress - –í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å
/streak - –ü–æ–ª–æ—Å–∞ —Ä–µ—à–µ–Ω–∏–π
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

üîç *Inline-—Ä–µ–∂–∏–º:*
–ù–∞–±–µ—Ä–∏—Ç–µ @academgrad_bot –≤ –ª—é–±–æ–º —á–∞—Ç–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∑–∞–¥–∞—á
–ü—Ä–∏–º–µ—Ä—ã:
‚Ä¢ @academgrad_bot –∞–ª–≥–µ–±—Ä–∞
‚Ä¢ @academgrad_bot –∏–Ω—Ç–µ–≥—Ä–∞–ª
‚Ä¢ @academgrad_bot –≥–µ–æ–º–µ—Ç—Ä–∏—è

üì± *–í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:*
–ü–æ–ª–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –¥–æ—Å—Ç—É–ø–µ–Ω –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ AcademGrad
  `, "Markdown");
}

async function sendMessage(chatId: number, text: string, parseMode?: string) {
  const botToken = Deno.env.get("TELEGRAM_BOT_TOKEN");
  
  const body: any = {
    chat_id: chatId,
    text: text,
  };
  
  if (parseMode) {
    body.parse_mode = parseMode;
  }

  await fetch(`https://api.telegram.org/bot${botToken}/sendMessage`, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify(body),
  });
}

async function answerInlineQuery(queryId: string, results: any[]) {
  const botToken = Deno.env.get("TELEGRAM_BOT_TOKEN");

  await fetch(`https://api.telegram.org/bot${botToken}/answerInlineQuery`, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({
      inline_query_id: queryId,
      results: results,
      cache_time: 300, // Cache for 5 minutes
      is_personal: true,
    }),
  });
}
